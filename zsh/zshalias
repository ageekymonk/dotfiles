# Enable aliases to be sudoâ€™ed
alias sudo='sudo '

# IP addresses
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\\? \\(addr:\\)\\?\\s\\?\\(\\(\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+\\)\\|[a-fA-F0-9:]\\+\\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache && killall -HUP mDNSResponder"

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'


# Docker aliases

if [ -f $ZSH_PRIVATE_CONFIG_DIR/workalias ]
then
    source $ZSH_PRIVATE_CONFIG_DIR/workalias
fi

dobash() {
    docker run -i -t $1 /bin/bash
}

dosh() {
    docker run -i -t $1 /bin/sh
}

doclean() {
    docker images | awk '/none/ { print $3 }' | xargs docker rmi -f
    docker ps -a | awk '/Exited/ { print $1 }' | xargs docker rm -f
}

alias doi="docker images"
alias dops="docker ps"
alias dormi="docker rmi -f"
alias dorm="docker rm -f"

# system commands
alias df="df -H"
alias curl="gpg --batch -q -d ~/.authinfo.gpg | curl --netrc-file /dev/stdin"

# aws show all ec2 instances
alias ec2="aws ec2 describe-instances --output table --query 'Reservations[*].Instances[*].{ID:InstanceId,Type:InstanceType,State:State.Name,PrivateIp:NetworkInterfaces[0].PrivateIpAddress,PublicIp:NetworkInterfaces[0].Association.PublicIp,Tags:Tags[?Key==\`Name\`].Value | [0]}'"

# aws start ec2 instances
alias ec2-start="aws ec2 start-instances --instance-ids "

# Changing Default programs
alias cat=ccat
if [[ "$(uname)" == "Darwin" ]]
then
alias wget=aria2c
fi
# fasd
alias j='fasd_cd -d'

# exa
alias ls='exa'

# Rest
function extract () {
      if [ -f $1 ] ; then
        case $1 in
          *.tar.bz2)   tar xjf $1     ;;
          *.tar.gz)    tar xzf $1     ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar e $1     ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xf $1      ;;
          *.tbz2)      tar xjf $1     ;;
          *.tgz)       tar xzf $1     ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)     echo "'$1' cannot be extracted via extract()" ;;
           esac
       else
           echo "'$1' is not a valid file"
       fi
     }

function my-accept-line() {
  # check if the buffer does not contain any words
  if [ ${#${(z)BUFFER}} -eq 0 ]; then
    # put newline so that the output does not start next
    # to the prompt
    echo
    # check if inside git repository
    if git rev-parse --git-dir > /dev/null 2>&1 ; then
      # if so, execute `git status'
      git status
    else
      # else run `ls'
      ls -l
    fi
  fi
  # in any case run the `accept-line' widget
  zle .accept-line
}
# create a widget from `my-accept-line' with the same name
zle -N accept-line my-accept-line
# rebind Enter, usually this is `^M'
bindkey '^M' accept-line

alias getmp3="youtube-dl -x --audio-format mp3 "
