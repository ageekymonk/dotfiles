if [ -f $ZSH_CONFIG_DIR/workalias ]
then
    source $ZSH_CONFIG_DIR/workalias
fi


# Enable aliases to be sudoâ€™ed
alias sudo='nocorrect sudo '

# Clipboard
alias cb='xclip -selection c'

# IP addresses
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\\? \\(addr:\\)\\?\\s\\?\\(\\(\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+\\)\\|[a-fA-F0-9:]\\+\\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Flush Directory Service cache
alias flush="sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache"

# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'

# git aliases
alias gitcontributors='git log --format="%aN" | sort -u'
alias gp='git push --force-with-lease'

# Emacs Aliases
function vterm_printf(){
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_cmd() {
    if [ -n "$TMUX" ]; then
        # tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]51;E"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]51;E"
    else
        printf "\e]51;E"
    fi

    printf "\e]51;E"
    local r
    while [[ $# -gt 0 ]]; do
        r="${1//\\/\\\\}"
        r="${r//\"/\\\"}"
        printf '"%s" ' "$r"
        shift
    done
    if [ -n "$TMUX" ]; then
        # tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\007\e\\"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\007\e\\"
    else
        printf "\e\\"
    fi
}

# Brew aliases
bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do; brew install $prog; done;
  fi
}

bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do; brew upgrade $prog; done;
  fi
}

bcp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do; brew uninstall $prog; done;
  fi
}

install() {
    local token
    token=$(brew search --casks | fzf-tmux --query="$1" +m --preview 'brew cask info {}')

    if [ "x$token" != "x" ]
    then
        echo "(I)nstall or open the (h)omepage of $token"
        read input
        if [ $input = "i" ] || [ $input = "I" ]; then
            brew cask install $token
        fi
        if [ $input = "h" ] || [ $input = "H" ]; then
            brew cask home $token
        fi
    fi
}

uninstall() {
    local token
    token=$(brew cask list | fzf-tmux --query="$1" +m --preview 'brew cask info {}')

    if [ "x$token" != "x" ]
    then
        echo "(U)ninstall or open the (h)omepage of $token"
        read input
        if [ $input = "u" ] || [ $input = "U" ]; then
            brew cask uninstall $token
        fi
        if [ $input = "h" ] || [ $token = "h" ]; then
            brew cask home $token
        fi
    fi
}

# Tmux
# zsh; needs setopt re_match_pcre. You can, of course, adapt it to your own shell easily.
tmuxkillf () {
    local sessions
    sessions="$(tmux ls|fzf --exit-0 --multi)"  || return $?
    local i
    for i in "${(f@)sessions}"
    do
        [[ $i =~ '([^:]*):.*' ]] && {
            echo "Killing $match[1]"
            tmux kill-session -t "$match[1]"
        }
    done
}

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

# ftpane - switch pane (@george-b)
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

# AWS Aliases

# account
function account-id() {
    aws sts get-caller-identity --query 'Account' --output text
}

# config
function aws-noncompliant-resources() {
    local rtype=$(aws configservice describe-compliance-by-resource --compliance-types NON_COMPLIANT | jq -r -c '.ComplianceByResources[].ResourceType' | uniq | peco)
    aws configservice describe-compliance-by-resource --compliance-types NON_COMPLIANT --resource-type ${rtype}
}

# Cloudfront
function cloudfronts() {
    aws cloudfront list-distributions \
        --output text \
        --query "
        DistributionList.Items[].[
          Aliases.Items[0],
          Status,
          ARN
        ]" |
        sort -k 1 |
        column -s$'\t' -t

}

function cloudfront-add-tag() {
    name=$1
    value=$2
    cloudfronts | peco | awk '{ print $3 } ' | xargs -I {} aws cloudfront tag-resource --resource {} --tags "Items=[{Key=$name,Value=$value}]"
}

# ec2

function instance-add-tag() {
    name=$1
    value=$2
    instances | peco | awk '{ print $1 } ' | xargs -I {} aws ec2 create-tags --resources {} --tags Key=$name,Value=$value
}

function volumes() {
    aws ec2 describe-volumes \
        --output text \
        --query "
        Volumes[].[
          VolumeId,
          [Tags[?Key=='Name'].Value][0][0],
          VolumeType,
          State,
          Encrypted
        ]" |
        sort -k 1 |
        column -s$'\t' -t
}

function volume-add-tag() {
    name=$1
    value=$2
    volumes | peco | awk '{ print $1 } ' | xargs -I {} aws ec2 create-tags --resources {} --tags Key=$name,Value=$value
}

function elbv2-add-tag() {
    name=$1
    value=$2
    elbv2s | peco | awk '{ print $5 }' | xargs -I {} aws elbv2 add-tags --resource-arns {} --tags Key=$name,Value=$value
}

function delete-snapshots() {
    aws ec2 describe-snapshots \
        --owner self \
        --output text \
        --query "
        Snapshots[].[
          SnapshotId,
          [Tags[?Key=='Name'].Value][0][0],
          State,
          Encrypted,
          StartTime,
          Description
        ]" |
        sort -k 5 |
        column -s$'\t' -t | peco | awk '{ print $1 }' | xargs -I {} aws ec2 delete-snapshot --snapshot-id {}
}

function elbv2-target-group-register-ip() {
    tg=$(elbv2s | elbv2-target-groups | peco | awk '{ print $1 }')
    instances | peco | instance-ip | awk '{ print $2 }' | xargs -I {} aws elbv2 register-targets --target-group-arn=${tg} --targets Id={}
}


function efs() {
    aws efs describe-file-systems \
        --output text \
        --query "
        FileSystems[].[
          FileSystemId,
          Name,
          PerformanceMode,
          Encrypted
        ]" |
        sort -k 1 |
        column -s$'\t' -t
}

function efs-add-tag() {
    name=$1
    value=$2
    efs | peco | awk '{ print $1 }' | xargs -I {} aws efs tag-resource --resource-id {} --tags Key=$1,Value=$2
}

function efs-add-lifecycle() {
    name=$1
    value=$2
    efs | peco | awk '{ print $1 }' | xargs -I {} aws efs put-lifecycle-configuration --file-system-id {} --lifecycle-policies "TransitionToIA=AFTER_7_DAYS"
}

function efs-recovery-points() {
    accountid=$(account-id)
    region=$(aws configure get region)
    efsid=$(efs | peco | awk '{ print $1 }')
    aws backup list-recovery-points-by-resource --resource-arn arn:aws:elasticfilesystem:${region}:${accountid}:file-system/${efsid} \
        --output text \
        --query "
        RecoveryPoints[].[
          RecoveryPointArn,
          CreationDate,
          BackupSizeBytes,
          Status,
          BackupVaultName
        ]" |
        column -s$'\t' -t | gawk '{ $2=strftime("%Y-%m-%d %H:%M:%S", $2); print $0 }' |
        sort -k 2
}

# IAM
function iam-policy() {
    export AWS_PAGER=""
    aws iam list-policies \
        --output text       \
        --query '
      Policies[].[
        PolicyName,
        Arn,
        DefaultVersionId
    ]'                  |
        LC_ALL=C sort -b -k 3 |
        column -s$'\t' -t | peco | awk '{ system("aws iam get-policy-version --policy-arn " $2 " --version-id "$3) }'

}

function iam-instance-profiles() {
    aws iam list-instance-profiles \
        --output text       \
        --query '
      InstanceProfiles[].[
        InstanceProfileName,
        Arn,
        DefaultVersionId
    ]'                  |
        LC_ALL=C sort -b -k 3 |
        column -s$'\t' -t

}

function delete-instance-profiles() {
    iam-instance-profiles | peco | awk '{ print $1 }' | xargs -I {} aws iam delete-instance-profile --instance-profile-name {}
}

# RDS
function rds-instance-add-tag() {
    name=$1
    value=$2
    rds-db-instances | peco | awk '{ print $6 }' | xargs -I {} aws rds add-tags-to-resource --resource-name {} --tags Key=$1,Value=$2
}

function rds-cluster-add-tag() {
    name=$1
    value=$2
    rds-db-clusters | peco | awk '{ print $5 }' | xargs -I {} aws rds add-tags-to-resource --resource-name {} --tags Key=$1,Value=$2
}

# Route53
function disable-health-check() {

    aws route53 list-health-checks \
        --output text               \
        --query "
      healthchecks[].[
        id,
        healthcheckconfig.fullyqualifieddomainname
      ]"                |
        sort -k 4             |
        column -s$'\t' -t | peco | awk '{ print $1 }' | xargs -I {} aws route53 update-health-check --health-check-id {} --disabled
}

# S3
function bucket-policy() {
  aws s3api list-buckets \
    --output text        \
    --query "
      Buckets[${buckets:+?contains(['${buckets// /"','"}'], Name)}].[
        Name,
        CreationDate
      ]"                |
  grep -E -- "$filters" |
  column -t | peco | awk '{ print $1 }' | xargs -I {} aws s3api get-bucket-policy --bucket {} | jq -r -c '.Policy' | jq .
}

bucket-add-tag() {
    name=$1
    value=$2
    local buckets=($(aws s3api list-buckets \
                         --output text        \
                         --query "
      Buckets[${buckets:+?contains(['${buckets// /"','"}'], Name)}].[
        Name,
        CreationDate
      ]"                |
                         grep -E -- "$filters" |
                         column -t | peco | awk '{ print $1 }' ))
    for element in "${buckets[@]}"; do
        tempfile=$(mktemp)
        echo $element
        if aws s3api get-bucket-tagging --bucket "${element}" 2>&1 > /dev/null; then
            aws s3api get-bucket-tagging --bucket "${element}" | jq -r --arg KEY "${name}" '.TagSet = [.TagSet[] | select(.Key != $KEY)]' | jq -r --arg KEY "$name" --arg VALUE "$value" '.TagSet[.TagSet | length] |= {"Key":$KEY, "Value":$VALUE}' > $tempfile
        else
            jq -r --arg KEY "$name" --arg VALUE "$value" '.TagSet = [{"Key":$KEY, "Value":$VALUE}]' <<<'{}' > $tempfile
        fi
        aws s3api put-bucket-tagging --bucket ${element} --tagging "file://${tempfile}"
    done

}

# SSM
ssm-connect() {
    instanceid=$(instances | peco | awk '{ print $1 }')
    aws ssm start-session --target ${instanceid}
}

# VPC
subnet-add-tag() {
    name=$1
    value=$2
    subnets | peco | awk '{ print $1 }' | xargs -I {} aws ec2 create-tags --resources {} --tags Key=$1,Value=$2
}

cloudfront-add-ip() {

    local prefixlist=($(aws ec2 describe-managed-prefix-lists \
                         --output text        \
                         --query "
                               PrefixLists[].[
                               PrefixListName,
                               PrefixListId,
                               AddressFamily
                                             ]"                |
                         grep -E -- "$filters" |
                         column -t | peco | awk '{ print $2 }' ))

    local pversion=$(aws ec2 describe-managed-prefix-lists --prefix-list-ids ${prefixlist} | jq -c -r '.PrefixLists[0].Version')
    echo ${pversion}

    curl http://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips | jq -r -c '.CLOUDFRONT_GLOBAL_IP_LIST[]' | peco | awk '{ print $1 }' | while read line; do
        aws ec2 modify-managed-prefix-list --prefix-list-id ${prefixlist} --add-entries Cidr=${line} --current-version ${pversion}
        pversion=$((pversion+1))
    done

}

# Azure

# Docker aliases

# Select a running docker container to stop
function ds() {
  local cid
  cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker stop "$cid"
}

alias dops="docker ps"

dobash() {
    dirname=${PWD##*/}
    cname=$(docker ps --format '{{ .Name }}' | peco )
    docker exec --rm -it --entrypoint=/bin/bash -v `pwd`:/${dirname} -w /${dirname} ${cname}
}

dosh() {
    dirname=${PWD##*/}
    cname=$(docker ps --format '{{ .Name }}' | peco )
    docker exec --rm -it --entrypoint=/bin/sh -v `pwd`:/${dirname} -w /${dirname} ${cname}
}

drsh() {
    dirname=${PWD##*/}
    imagename=$(docker images --format '{{ .Repository }}:{{ .Tag }}' | peco)
    docker run --rm -it --entrypoint=/bin/sh -v `pwd`:/${dirname} -w /${dirname} ${imagename}
}

drcmd() {
    dirname=${PWD##*/}
    imagename=$(docker images --format '{{ .Repository }}:{{ .Tag }}' | peco)
    docker run --rm -it -v `pwd`:/${dirname} -w /${dirname} ${imagename} $*
}

drbash() {
    docker run -i -t $1 /bin/bash
}

doclean() {
    docker images | awk '/none/ { print $3 }' | xargs docker rmi -f
    docker ps -a | awk '/Exited/ { print $1 }' | xargs docker rm -f
}

alias dormi="docker images --format '{{ .Repository }}:{{ .Tag }}' | peco --exec docker rmi -f"
alias dorm="docker ps --format '{{ .Name }}' | peco | xargs docker rm -f"
alias doi="docker images --format '{{ .Repository }}:{{ .Tag }}' | peco | pbcopy"

# compdef
_docker 2>/dev/null
compdef __docker_complete_running_containers dosh
compdef __docker_complete_running_containers dobash
compdef __docker_complete_images drsh
compdef __kubectl_complete_

# kubernetes
alias ka="kustomize build | kubectl apply -f -"
alias kb="kustomize build | less"
alias kdel="kustomize build | kubectl delete -f -"
alias ke="kubectl get events --sort-by=.metadata.creationTimestamp"
alias ns="kubens"
alias kx="kubectx"
alias kdiff="kustomize build | kubectl diff -f -"
alias kgsecreg='kgsec registry -o yaml | yq r - "data.[.dockerconfigjson]" | base64 -d'
alias kubeclean="kubectl config get-contexts | peco | awk '{ print \$1 }' | xargs -I _ kubectl config delete-context _"
alias kdebug="kubectl run tmp-shell --rm -i --tty --image nicolaka/netshoot -- /bin/bash"
alias krmpo="kubectl get pods | peco | awk '{ print \$1 }' | xargs -I _ kubectl delete pods _"
alias kgpoy="kubectl get pods | peco | awk '{ print \$1 }' | xargs -I _ kubectl get pods _ -o yaml"
alias kdpo="kubectl get pods | peco | awk '{ print \$1 }' | xargs -I _ kubectl describe pods _"
alias klo="kubectl get pods | peco | awk '{ print \$1 }' | xargs -I _ kubectl logs -f _"

ks() {
    local cluster=$(kubectl config get-contexts -o name | fzf -q "$1")

    echo $cluster
    if [[ $cluster ]]; then
        k9s --context $cluster
    fi
}

kcrsecreg() {
   local namespace=$(kubectl get namespace | peco | awk '{ print $1 }')
   kubectl create secret docker-registry registry --docker-server=$1 --docker-username=$2 --docker-password="$3" -n ${namespace}
}

ktoken() {
  local namespace=$(kubectl get namespace | peco | awk '{ print $1 }')
  local secret_name=$(kubectl get secret -n ${namespace} | peco | awk '{ print $1 }')

  token=$(kubectl view-secret ${secret_name} -n ${namespace} token)
  export K8S_TOKEN=${token}
  echo $K8S_TOKEN | pbcopy
}

# Terraform
alias ti="terraform init"
alias tp="terraform plan"
alias tapp="terraform apply"

# system commands
alias df="df -H"
# alias curl="gpg --batch -q -d ~/.authinfo.gpg | curl --netrc-file /dev/stdin"

# Changing Default programs
if [[ "$(uname)" == "Darwin" ]]
then
    alias wget=aria2c
    alias cat=bat
fi

alias cat=bat

# autojump
alias j='autojump'

# exa
alias ls='eza'
alias l='eza --long --git'



# find
alias find='fd'

# cd
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias ......='cd ../../../../../'

# Rest
function extract () {
      if [ -f $1 ] ; then
        case $1 in
          *.tar.bz2)   tar xjf $1     ;;
          *.tar.gz)    tar xzf $1     ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar e $1     ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xf $1      ;;
          *.tbz2)      tar xjf $1     ;;
          *.tgz)       tar xzf $1     ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)     echo "'$1' cannot be extracted via extract()" ;;
           esac
       else
           echo "'$1' is not a valid file"
       fi
     }

function my-accept-line() {
  # check if the buffer does not contain any words
  if [ ${#${(z)BUFFER}} -eq 0 ]; then
    # put newline so that the output does not start next
    # to the prompt
    echo
      ls -l
  fi
  # in any case run the `accept-line' widget
  zle .accept-line
}
# create a widget from `my-accept-line' with the same name
zle -N accept-line my-accept-line
# rebind Enter, usually this is `^M'
bindkey '^M' accept-line

# fkill - kill processes - list only the ones you can kill. Modified the earlier script.
fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-emacsclient} "${files[@]}"
}

# ALT-C - jump into any directory in git repo
fzf-cd-widget() {
  local pth=$(git rev-parse --show-toplevel) 2> /dev/null
  if [[ -z "$pth" ]]; then
    pth="."
  fi

  local dir="$(fd --type d --search-path $pth | fzf )"
  cd "$dir"
  if [[ -z "$dir" ]]; then
    zle redisplay
    return 0
  fi
  unset dir # ensure this doesn't end up appearing in prompt expansion
  local ret=$?
  zle fzf-redraw-prompt
  return $ret
}
zle     -N    fzf-cd-widget
bindkey '\ec' fzf-cd-widget
