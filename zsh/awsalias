# AWS Aliases

# account
function account-id() {
    aws sts get-caller-identity --query 'Account' --output text
}

# Certificate Manager

function acm-list-certificates() {
    aws acm list-certificates --output text --query "CertificateSummaryList[].[
        CertificateArn,
        DomainName,
        Status,
        Issuer
    ]" | column -t
}

function acm-import-cert() {
    local certfile=$(gum file)
    local key=$(gum file)
    # Extract lines between first Begin and End 
    sed '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/!d;/-----END CERTIFICATE-----/q' $certfile > ${certfile_cert%%.crt}.pem
    aws acm import-certificate --certificate fileb://${certfile_cert%%.crt}.pem --private-key fileb://${key}
}

# config
function aws-noncompliant-resources() {
    local rtype=$(aws configservice describe-compliance-by-resource --compliance-types NON_COMPLIANT | jq -r -c '.ComplianceByResources[].ResourceType' | uniq | peco)
    aws configservice describe-compliance-by-resource --compliance-types NON_COMPLIANT --resource-type ${rtype}
}

# datasync

function datasync-tasks-running() {
    aws datasync list-tasks --query "Tasks[?Status=='RUNNING']" | jq -r -c '.[] | [.Name, .TaskArn, .Status, .Options.SourceLocationArn, .Options.DestinationLocationArn] | @tsv'
}

function datasync-task-executions-failed() {
    aws datasync list-task-executions --query "TaskExecutions[?Status=='ERROR']"
}


# organizations

function list-org-root() {
    aws organizations list-roots | jq -r -c '.Roots[] | [.Id, .Name] | @tsv' | awk '{ print $1 }'
}

function list-ous() {
    aws organizations list-organizational-units-for-parent --parent-id $(list-org-root) | jq -r -c '.OrganizationalUnits[] | [.Id, .Name] | @tsv' | peco | awk '{ print $1 }'
}

function list-scps() {
    aws organizations list-policies --filter SERVICE_CONTROL_POLICY | jq -r -c '.Policies[] | [.Id, .Name] | @tsv' | peco | awk '{ print $1 }'
}

function detach-scp() {
    scp=$(list-scps)
    root=$(list-ous)
    aws organizations detach-policy --policy-id ${scp} --target-id ${root}
}

function attach-scp() {
    scp=$(list-scps)
    root=$(list-ous)
    aws organizations attach-policy --policy-id ${scp} --target-id ${root}
}

function list-permission-sets() {
    instance_store_id=$(bkt --ttl=1y -- aws sso-admin list-instances --query "Instances[0].IdentityStoreId")
    instance_store_arn=$(bkt --ttl=1y -- aws sso-admin list-instances | jq -r -c '.Instances[0].InstanceArn')
    permission_sets=$(bkt --ttl=1w -- aws sso-admin list-permission-sets --instance-arn ${instance_store_arn}) 
    echo ${permission_sets} | jq -r -c '.PermissionSets[]' | \
    xargs -I {} bkt --ttl=1w -- aws sso-admin describe-permission-set --instance-arn ${instance_store_arn} --permission-set-arn {} | jq -r -c '.PermissionSet | [.Name, .PermissionSetArn] | @tsv'
}

function show-permission-sets-inline-policy() {
    instance_store_id=$(bkt --ttl=1y -- aws sso-admin list-instances --query "Instances[0].IdentityStoreId")
    instance_store_arn=$(bkt --ttl=1y -- aws sso-admin list-instances | jq -r -c '.Instances[0].InstanceArn')
    permission_set=$(list-permission-sets | peco | awk '{ print $2 }')
    aws sso-admin get-inline-policy-for-permission-set --instance-arn ${instance_store_arn} --permission-set-arn ${permission_set} | jq -r -c '.InlinePolicy' | python -m json.tool | EDITOR="code -w" vipe | python -m json.tool
}

function edit-permission-sets-inline-policy() {
    instance_store_id=$(bkt --ttl=1y -- aws sso-admin list-instances --query "Instances[0].IdentityStoreId")
    instance_store_arn=$(bkt --ttl=1y -- aws sso-admin list-instances | jq -r -c '.Instances[0].InstanceArn')
    permission_set=$(list-permission-sets | peco | awk '{ print $2 }')
    policy=$( aws sso-admin get-inline-policy-for-permission-set --instance-arn ${instance_store_arn} --permission-set-arn ${permission_set} | jq -r -c '.InlinePolicy' | python -m json.tool | EDITOR="code -w" vipe | jq -r -c .)
    aws sso-admin put-inline-policy-to-permission-set --instance-arn ${instance_store_arn} --permission-set-arn ${permission_set} --inline-policy ${policy}
    aws sso-admin provision-permission-set --instance-arn ${instance_store_arn} --permission-set-arn ${permission_set} --target-type ALL_PROVISIONED_ACCOUNTS
}

function list-groups() {
    instance_store_id=$(bkt --ttl=1y -- aws sso-admin list-instances | jq -r -c '.Instances[0].IdentityStoreId')
    instance_store_arn=$(bkt --ttl=1y -- aws sso-admin list-instances | jq -r -c '.Instances[0].InstanceArn')
    groups=$(bkt --ttl=1w -- aws identitystore list-groups --identity-store-id ${instance_store_id} | jq -r -c '.Groups[]')
    echo ${groups} | jq -r -c '.| [.DisplayName, .GroupId] | @tsv' 
}

# Cloudformation
function list-stacksets() {
    gum spin --title "Fetching Stacksets" -- aws cloudformation list-stack-sets \
    --output text \
    --query "
        Summaries[].[
          StackSetName,
          Description,
          Status
        ]" |
    sort -k 1 |
    column -s$'\t' -t
}

function list-stacks() {
    gum spin --title "Fetching Stacks" -- aws cloudformation list-stacks \
    --output text \
    --query "
            StackSummaries[].[
            StackName,
            StackStatus,
            StackId
            ]" |
    sort -k 1 |
    column -s$'\t' -t
}

function get-stackset-details() {
    list-stacksets | peco | awk '{ print $1 }' | xargs -I {} aws cloudformation describe-stack-set --stack-set-name {}
}

function update-stackset() {
    fname=$(gum file)
    # if fname is set
    if [ -n "$fname" ]; then
    list-stacksets | peco | awk '{ print $1 }' | xargs -I {} aws cloudformation update-stack-set --stack-set-name {} --template-body file://${fname} --capabilities CAPABILITY_NAMED_IAM
    fi
}

function get-stackset-instances() {
    list-stacksets | peco | awk '{ print $1 }' | xargs -I {} aws cloudformation list-stack-instances --stack-set-name {} | jq -r -c '.Summaries[] | [.Account, .Status, .StackInstanceStatus.DetailedStatus] | @tsv'
}

function update-stack() {
    fname=$(gum file)
    list-stacks | peco | awk '{ print $1 }' | xargs -I {} aws cloudformation update-stack --stack-name {} --template-body file://${fname} --capabilities CAPABILITY_NAMED_IAM
}

function create-stack() {
    fname=$(gum file)
    stackname=$(gum input --placeholder "Stack Name")
    aws cloudformation create-stack --stack-name ${stackname} --template-body file://${fname} --capabilities CAPABILITY_NAMED_IAM
}

function get-stack-details() {
    list-stacks | peco | awk '{ print $1 }' | xargs -I {} aws cloudformation describe-stacks --stack-name {}
}
# Cloudfront
function cloudfronts() {
    aws cloudfront list-distributions \
    --output text \
    --query "
        DistributionList.Items[].[
          Aliases.Items[0],
          Status,
          ARN
        ]" |
    sort -k 1 |
    column -s$'\t' -t

}

function cloudfront-add-tag() {
    name=$1
    value=$2
    cloudfronts | peco | awk '{ print $3 } ' | xargs -I {} aws cloudfront tag-resource --resource {} --tags "Items=[{Key=$name,Value=$value}]"
}

# ec2

function list-ec2-instances() {
    gum spin --title "Fetching EC2 Instances" -- aws ec2 describe-instances \
    --output text \
    --query "
        Reservations[].Instances[].[
          InstanceId,
          [Tags[?Key=='Name'].Value][0][0],
          State.Name,
          InstanceType,
          PublicIpAddress,
          PrivateIpAddress
        ]" |
    sort -k 1 |
    column -s$'\t' -t
}

function list-ec2-snapshots() {
    aws ec2 describe-snapshots \
    --owner self \
    --output text \
    --query "
        Snapshots[].[
          SnapshotId,
          [Tags[?Key=='Name'].Value][0][0],
          State,
          Encrypted,
          StartTime,
          Description
        ]" |
    sort -k 5 |
    column -s$'\t' -t
}

function instance-add-tag() {
    name=$1
    value=$2
    list-ec2-instances | peco | awk '{ print $1 } ' | xargs -I {} aws ec2 create-tags --resources {} --tags Key=$name, Value=$value
}

function volumes() {
    aws ec2 describe-volumes \
    --output text \
    --query "
        Volumes[].[
          VolumeId,
          [Tags[?Key=='Name'].Value][0][0],
          VolumeType,
          State,
          Encrypted
        ]" |
    sort -k 1 |
    column -s$'\t' -t
}

function albs() {
    aws elbv2 describe-load-balancers \
    --output text \
    --query "
        LoadBalancers[].[
          LoadBalancerName,
          DNSName,
          Scheme,
          Type,
          LoadBalancerArn
        ]" |
    sort -k 1 |
    column -s$'\t' -t
}

function alb-update-certificate() {
    certarn=$(acm-list-certificates | peco | awk '{ print $1 }')
    alb=$(albs | peco | awk '{ print $5 }')
    aws elbv2 add-listener-certificates --listener-arn $(aws elbv2 describe-listeners --load-balancer-arn ${alb} --output text --query "Listeners[].ListenerArn") --certificates CertificateArn=${certarn}
}

function volume-add-tag() {
    name=$1
    value=$2
    volumes | peco | awk '{ print $1 } ' | xargs -I {} aws ec2 create-tags --resources {} --tags Key=$name, Value=$value
}

function elbv2-add-tag() {
    name=$1
    value=$2
    elbv2s | peco | awk '{ print $5 }' | xargs -I {} aws elbv2 add-tags --resource-arns {} --tags Key=$name, Value=$value
}

function delete-snapshots() {
    aws ec2 describe-snapshots \
    --owner self \
    --output text \
    --query "
        Snapshots[].[
          SnapshotId,
          [Tags[?Key=='Name'].Value][0][0],
          State,
          Encrypted,
          StartTime,
          Description
        ]" |
    sort -k 5 |
    column -s$'\t' -t | peco | awk '{ print $1 }' | xargs -I {} aws ec2 delete-snapshot --snapshot-id {}
}

function elbv2-target-group-register-ip() {
    tg=$(elbv2s | elbv2-target-groups | peco | awk '{ print $1 }')
    instances | peco | instance-ip | awk '{ print $2 }' | xargs -I {} aws elbv2 register-targets --target-group-arn=${tg} --targets Id= {}
}


function efs() {
    aws efs describe-file-systems \
    --output text \
    --query "
        FileSystems[].[
          FileSystemId,
          Name,
          PerformanceMode,
          Encrypted
        ]" |
    sort -k 1 |
    column -s$'\t' -t
}

function efs-add-tag() {
    name=$1
    value=$2
    efs | peco | awk '{ print $1 }' | xargs -I {} aws efs tag-resource --resource-id {} --tags Key=$1, Value=$2
}

function efs-add-lifecycle() {
    name=$1
    value=$2
    efs | peco | awk '{ print $1 }' | xargs -I {} aws efs put-lifecycle-configuration --file-system-id {} --lifecycle-policies "TransitionToIA=AFTER_7_DAYS"
}

function efs-recovery-points() {
    accountid=$(account-id)
    region=$(aws configure get region)
    efsid=$(efs | peco | awk '{ print $1 }')
    aws backup list-recovery-points-by-resource --resource-arn arn:aws:elasticfilesystem:${region}:${accountid}:file-system/${efsid} \
    --output text \
    --query "
        RecoveryPoints[].[
          RecoveryPointArn,
          CreationDate,
          BackupSizeBytes,
          Status,
          BackupVaultName
        ]" |
    column -s$'\t' -t | gawk '{ $2=strftime("%Y-%m-%d %H:%M:%S", $2); print $0 }' |
    sort -k 2
}

# IAM
function list-iam-policy() {
    gum spin --title "Fetching IAM Policies" -- aws iam list-policies \
    --output text       \
    --query '
      Policies[].[
        PolicyName,
        Arn
    ]'                  |
    LC_ALL=C sort -b -k 1 |
    column -s$'\t' -t
}

function list-iam-roles() {
    gum spin --title "Fetching IAM Roles" -- aws iam list-roles \
    --output text       \
    --query '
      Roles[].[
        RoleName,
        Arn
    ]'                  |
    LC_ALL=C sort -b -k 1 |
    column -s$'\t' -t
}

function get-iam-role-trust-policy() {
    list-iam-roles | peco | awk '{ print $1 }' | xargs -I {} aws iam get-role --role-name {} | jq -r -c '.Role.AssumeRolePolicyDocument'
}

function edit-iam-role-inline-policy() {
    rolename=$(list-iam-roles | peco --select-1 | awk '{ print $1 }')
    inline_policy=$(aws iam list-role-policies --role-name ${rolename} | jq -r -c '.PolicyNames[]' | peco)
    policy=$(aws iam get-role-policy --role-name ${rolename} --policy-name ${inline_policy} | jq -r -c '.PolicyDocument' | python -m json.tool | EDITOR="code -w" vipe | jq -r -c .)
    aws iam put-role-policy --role-name ${rolename} --policy-name ${inline_policy} --policy-document ${policy}
}

function edit-iam-policy() {
    policyarn=$(list-iam-policy | peco | awk '{ print $2 }')
    policy=$(aws iam get-policy --policy-arn ${policyarn} | jq -r -c '.Policy.DefaultVersionId' | xargs -I {} aws iam get-policy-version --policy-arn ${policyarn} --version-id {} | jq -r -c '.PolicyVersion.Document' | python -m json.tool | EDITOR="code -w" vipe | jq -r -c .)
    aws iam create-policy-version --policy-arn ${policyarn} --policy-document ${policy} --set-as-default
}

function clone-iam-role() {
    rolename=$(list-iam-roles | peco --select-1 | awk '{ print $1 }')
    newrolename=$(gum input --placeholder "New Role Name")
    aws iam create-role --role-name ${newrolename} --assume-role-policy-document $(get-iam-role-trust-policy)
    while read policyname; 
    do 
    policydocument=$(aws iam get-role-policy --role-name ${rolename} --policy-name ${policyname} | jq -r -c '.PolicyDocument'); 
    aws iam put-role-policy --role-name ${newrolename} --policy-name ${policyname} --policy-document ${policydocument}
    
    done < <(aws iam list-role-policies --role-name ${rolename} | jq -r -c '.PolicyNames[]')


    while read attachedpolicy;
    do
    aws iam attach-role-policy --role-name ${newrolename} --policy-arn ${attachedpolicy}
    done < <(aws iam list-attached-role-policies --role-name ${rolename} | jq -r -c '.AttachedPolicies[].PolicyArn')
}

function edit-iam-role-trust-policy() {
    rolename=$(list-iam-roles | peco --select-1 | awk '{ print $1 }')
    policy=$(aws iam get-role --role-name ${rolename} | jq -r -c '.Role.AssumeRolePolicyDocument' | python -m json.tool | EDITOR="code -w" vipe | jq -r -c .)
    aws iam update-assume-role-policy --role-name ${rolename} --policy-document ${policy}
}

function iam-policy() {
    export AWS_PAGER=""
    aws iam list-policies \
    --output text       \
    --query '
      Policies[].[
        PolicyName,
        Arn,
        DefaultVersionId
    ]'                  |
    LC_ALL=C sort -b -k 3 |
    column -s$'\t' -t | peco | awk '{ system("aws iam get-policy-version --policy-arn " $2 " --version-id "$3) }'

}

function iam-instance-profiles() {
    aws iam list-instance-profiles \
    --output text       \
    --query '
      InstanceProfiles[].[
        InstanceProfileName,
        Arn,
        DefaultVersionId
    ]'                  |
    LC_ALL=C sort -b -k 3 |
    column -s$'\t' -t

}

function delete-instance-profiles() {
    iam-instance-profiles | peco | awk '{ print $1 }' | xargs -I {} aws iam delete-instance-profile --instance-profile-name {}
}

# kms
function list-kms-keys() {
    aws kms list-aliases \
    --output text       \
    --query '
      Aliases[].[
        AliasName,
        TargetKeyId
    ]'                  |
    LC_ALL=C sort -b -k 1 |
    column -s$'\t' -t
}

function edit-kms-key-policy() {
    keyid=$(list-kms-keys | peco | awk '{ print $2 }')
    policy=$(aws kms get-key-policy --key-id ${keyid} --policy-name default | jq -r -c '.Policy' | python -m json.tool | EDITOR="code -w" vipe | jq -r -c .)
    aws kms put-key-policy --key-id ${keyid} --policy-name default --policy ${policy}
}

# RDS
function rds-instance-add-tag() {
    name=$1
    value=$2
    rds-db-instances | peco | awk '{ print $6 }' | xargs -I {} aws rds add-tags-to-resource --resource-name {} --tags Key=$1, Value=$2
}

function rds-cluster-add-tag() {
    name=$1
    value=$2
    rds-db-clusters | peco | awk '{ print $5 }' | xargs -I {} aws rds add-tags-to-resource --resource-name {} --tags Key=$1, Value=$2
}

# Route53
function disable-health-check() {

    aws route53 list-health-checks \
    --output text               \
    --query "
      healthchecks[].[
        id,
        healthcheckconfig.fullyqualifieddomainname
      ]"                |
    sort -k 4             |
    column -s$'\t' -t | peco | awk '{ print $1 }' | xargs -I {} aws route53 update-health-check --health-check-id {} --disabled
}

# sagemaker
function sagemaker-notebooks() {
    aws sagemaker list-notebook-instances \
    --output text       \
    --query '
      NotebookInstances[].[
        NotebookInstanceName,
        NotebookInstanceStatus,
        InstanceType,
        CreationTime
    ]'                  |
    LC_ALL=C sort -b -k 3 |
    column -s$'\t' -t
}

function sagemaker-notebook-stop() {
    sagemaker-notebooks | peco | awk '{ print $1 }' | xargs -I {} aws sagemaker stop-notebook-instance --notebook-instance-name {}
}

function sagemaker-notebook-start() {
    sagemaker-notebooks | peco | awk '{ print $1 }' | xargs -I {} aws sagemaker start-notebook-instance --notebook-instance-name {}
}

function sagemaker-notebook-resize() {
    instance_size=$(aws --region us-east-1 pricing get-products --service-code AmazonSageMaker --filters Type=TERM_MATCH,Field=regionCode,Value=us-east-1 | jq -r '.PriceList[]|fromjson|select(.product.productFamily == "ML Instance")|.product.attributes.instanceName' | sort | uniq | peco)
    sagemaker-notebooks | peco | awk '{ print $1 }' | xargs -I {} aws sagemaker update-notebook-instance --notebook-instance-name {} --instance-type ${instance_size}
}

# SNS
function list-topics() {
    gum spin --title "Fetching Topics" -- aws sns list-topics \
    --output text       \
    --query '
      Topics[].[
        TopicArn
    ]'                  |
    LC_ALL=C sort -b -k 1 |
    column -s$'\t' -t
}

function list-subscriptions-for-topics() {
    list-topics | peco | awk '{ print $1 }' | xargs -I {} aws sns list-subscriptions-by-topic --topic-arn {}
}

function list-subscriptions() {
    gum spin --title "Fetching Subscriptions" -- aws sns list-subscriptions \
    --output text       \
    --query '
      Subscriptions[].[
        SubscriptionArn,
        Protocol,
        Endpoint
    ]'                  |
    LC_ALL=C sort -b -k 1 |
    column -s$'\t' -t
}

function add-email-subscription() {
    email=$(gum input --placeholder "Email")
    list-topics | peco | awk '{ print $1 }' | xargs -I {} aws sns subscribe --topic-arn {} --protocol email --notification-endpoint ${email}
}

function confirm-subscription() {
    confirmlink=$(gum input --char-limit 4000 --placeholder "Confirmation Link")
    token=$(echo $confirmlink | python3 -c "import sys; from urllib.parse import unquote; print(unquote(sys.stdin.read()).split('&')[1].split('=')[-1]);")
    echo $token
    list-topics | peco | awk '{ print $1 }' | xargs -I {} aws sns confirm-subscription --topic-arn {} --token ${token}
}

function delete-subscriptions() {
    list-subscriptions | peco | awk '{ print $1 }' | xargs -I {} aws sns unsubscribe --subscription-arn {}
}

# S3
function list-buckets() {
    gum spin --title "Fetching Buckets" -- aws s3api list-buckets \
    --output text        \
    --query "
      Buckets[].[
        Name,
        CreationDate
      ]"                |
    grep -E -- "$filters" |
    column -t
}

function show-bucket-versioning() {
    list-buckets | peco | awk '{ print $1 }' | xargs -I {} aws s3api get-bucket-versioning --bucket {}
}

function enable-bucket-versioning() {
    list-buckets | peco | awk '{ print $1 }' | xargs -I {} --verbose aws s3api put-bucket-versioning --bucket {} --versioning-configuration Status=Enabled
}

function bucket-policy() {
    list-buckets | peco | awk '{ print $1 }' | xargs -I {} aws s3api get-bucket-policy --bucket {} | jq -r -c '.Policy' | jq .
}

function edit-bucket-policy() {
    bucketname=$(list-buckets | peco | awk '{ print $1 }')
    policy=$(aws s3api get-bucket-policy --bucket $bucketname | jq -r -c '.Policy' | EDITOR="code -w" vipe)
    aws s3api put-bucket-policy --bucket $bucketname --policy "$policy"
}

bucket-add-tag() {
    name=$1
    value=$2
    local buckets=($(aws s3api list-buckets \
            --output text        \
            --query "
      Buckets[${buckets:+?contains(['${buckets// /"','"}'], Name)}].[
        Name,
        CreationDate
      ]"                |
            grep -E -- "$filters" |
            column -t | peco | awk '{ print $1 }' ))
    for element in "${buckets[@]}"; do
    tempfile=$(mktemp)
    echo $element
    if aws s3api get-bucket-tagging --bucket "${element}" 2>&1 > /dev/null; then
    aws s3api get-bucket-tagging --bucket "${element}" | jq -r --arg KEY "${name}" '.TagSet = [.TagSet[] | select(.Key != $KEY)]' | jq -r --arg KEY "$name" --arg VALUE "$value" '.TagSet[.TagSet | length] |= {"Key":$KEY, "Value":$VALUE}' > $tempfile
    else
    jq -r --arg KEY "$name" --arg VALUE "$value" '.TagSet = [{"Key":$KEY, "Value":$VALUE}]' <<<'{}' > $tempfile
    fi
    aws s3api put-bucket-tagging --bucket ${element} --tagging "file://${tempfile}"
    done

}

# SSM
ssm-connect() {
    instanceid=$(instances | peco | awk '{ print $1 }')
    aws ssm start-session --target ${instanceid}
}

# VPC
subnet-add-tag() {
    name=$1
    value=$2
    subnets | peco | awk '{ print $1 }' | xargs -I {} aws ec2 create-tags --resources {} --tags Key=$1, Value=$2
}

# Add to transit gateway Route table

function tgw-show-route-tables() {
    aws ec2 describe-transit-gateway-route-tables --output text --query "TransitGatewayRouteTables[].[
        TransitGatewayRouteTableId,
        TransitGatewayId,
        State,
        Tags[?Key=='Name'].Value | [0]
    ]" | column -t
}

function tgw-show-static-routes() {
    tgwroute=$(tgw-show-route-tables | peco | awk '{ print $1 }')
    aws ec2 search-transit-gateway-routes --transit-gateway-route-table-id ${tgwroute} --filters Name=type, Values=static \
    | jq -r -c '.Routes[] | select(.TransitGatewayAttachments != null) | [.DestinationCidrBlock, .TransitGatewayAttachments[].TransitGatewayAttachmentId] | @tsv' | peco
}

function tgw-show-attachments() {
    aws ec2 describe-transit-gateway-attachments | \
    jq -r -c '.TransitGatewayAttachments[] | [.TransitGatewayAttachmentId, .ResourceType, .ResourceOwnerId, .ResourceRegion, .State, (.Tags[] | select(.Key == "Name") | .Value)] | @tsv' | peco
}

function tgw-add-static-route() {
    tgwroute=$(tgw-show-route-tables | peco | awk '{ print $1 }')
    tgwattach=$(tgw-show-attachments | peco | awk '{ print $1 }')
    cidr=$(gum input --placeholder "CIDR")
    echo aws ec2 create-transit-gateway-route --transit-gateway-route-table-id ${tgwroute} --destination-cidr-block ${cidr} --transit-gateway-attachment-id ${tgwattach}
    aws ec2 create-transit-gateway-route --transit-gateway-route-table-id ${tgwroute} --destination-cidr-block ${cidr} --transit-gateway-attachment-id ${tgwattach}
}

cloudfront-add-ip() {

    local prefixlist=($(aws ec2 describe-managed-prefix-lists \
            --output text        \
            --query "
                               PrefixLists[].[
                               PrefixListName,
                               PrefixListId,
                               AddressFamily
                                             ]"                |
            grep -E -- "$filters" |
            column -t | peco | awk '{ print $2 }' ))

    local pversion=$(aws ec2 describe-managed-prefix-lists --prefix-list-ids ${prefixlist} | jq -c -r '.PrefixLists[0].Version')
    echo ${pversion}

    curl http://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips | jq -r -c '.CLOUDFRONT_GLOBAL_IP_LIST[]' | peco | awk '{ print $1 }' | while read line; do
    aws ec2 modify-managed-prefix-list --prefix-list-id ${prefixlist} --add-entries Cidr=${line} --current-version ${pversion}
    pversion=$((pversion+1))
    done

}