# Export Lang
export LANG=en_AU.UTF-8

# Path to your oh-my-zsh installation.
if [[ "$(uname)" == "Darwin" ]]
then
    USERNAME=`whoami`
    export ZSH=/Users/$USERNAME/.oh-my-zsh
    # Would you like to use another custom folder than $ZSH/custom?
    ZSH_CONFIG_FILE=`greadlink -f ~/.zshrc`
    ZSH_CONFIG_DIR=`dirname $ZSH_CONFIG_FILE`
    ZSH_CUSTOM=$ZSH_CONFIG_DIR
    source /Users/$USERNAME/.iterm2_shell_integration.zsh

elif [[ "$(uname)" == "Linux" ]]
then
    USERNAME=`whoami`
    export ZSH=/home/$USERNAME/.oh-my-zsh
    # Would you like to use another custom folder than $ZSH/custom?
    ZSH_CONFIG_FILE=`readlink -f ~/.zshrc`
    ZSH_CONFIG_DIR=`dirname $ZSH_CONFIG_FILE`
    ZSH_CUSTOM=$ZSH_CONFIG_DIR
    export SHELL=/bin/zsh
fi

# Oh My ZSH Configuration
CASE_SENSITIVE="true"
UPDATE_ZSH_DAYS=15
ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"
HIST_STAMPS="mm/dd/yyyy"


### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f" || \
        print -P "%F{160}▓▒░ The clone has failed.%f"
fi
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit installer's chunk

DEFAULT_USER=${USER}

source $ZSH/oh-my-zsh.sh

zinit snippet OMZ::plugins/git/git.plugin.zsh
zinit snippet OMZ::plugins/docker/_docker

zinit snippet https://raw.githubusercontent.com/ageekymonk/kubectl-aliases/master/.kubectl_aliases

zinit load zsh-users/zsh-autosuggestions
zinit load zsh-users/zsh-history-substring-search
zinit load zsh-users/zsh-completions
zinit load zsh-users/zsh-syntax-highlighting
zinit load wfxr/forgit

zinit as"program" atclone'fasd --init auto > fasd.zsh' \
      atpull'%atclone' pick"fasd" src"fasd.zsh" nocompile'!' for \
      clvv/fasd

zinit wait lucid for \
      hlissner/zsh-autopair

zinit light-mode lucid wait has"kubectl" for \
      id-as"kubectl_completion" \
      as"completion" \
      atclone"kubectl completion zsh > _kubectl" \
      atpull"%atclone" \
      run-atpull \
      zdharma/null
# User configuration

eval "$(starship init zsh)"

# Do not record duplicate in your history
export HISTCONTROL=ignoreboth:erasedups
export HISTORY_IGNORE="(ls|cd|pwd| *)";
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_BEEP

# Configure virtualenv and pyenv
if which pyenv > /dev/null;
then
    eval "$(pyenv init -)";
fi

if which pyenv-virtualenv-init > /dev/null; then
    eval "$(pyenv virtualenv-init -)";
fi

# fzf

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh

_fzf_compgen_path() {
  ag -g "" "$1"
}

# nvm
export NVM_DIR=~/.nvm
if [[ "$(uname)" == "Darwin" ]]
then
    source $(brew --prefix nvm)/nvm.sh --no-use
fi

# Start gpg-agent
gpgconf --launch gpg-agent

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export PATH="/usr/local/opt/mysql-client/bin:$PATH"

export PATH="$PATH:$HOME/.bash-my-aws/bin"
source ~/.bash-my-aws/aliases
source ~/.bash-my-aws/bash_completion.sh

source $ZSH_CUSTOM/zshalias

. $HOME/.asdf/asdf.sh
fpath=(${ASDF_DIR}/completions $fpath)

autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit

# Emacs style
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line '^x^e' edit-command-line
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey -s '^f^v' ' | peco | pbcopy\n'

# Modules
autoload -Uz allopt zed zmv zcalc colors

autoload -Uz select-word-style
select-word-style shell

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic
[ -f "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env" ] && source "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env"

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
# export PATH="/usr/local/opt/ruby/bin:$PATH"

_python_argcomplete() {
    local IFS=$'\013'
    local SUPPRESS_SPACE=0
    if compopt +o nospace 2> /dev/null; then
        SUPPRESS_SPACE=1
    fi
    COMPREPLY=( $(IFS="$IFS" \
                     COMP_LINE="$COMP_LINE" \
                     COMP_POINT="$COMP_POINT" \
                     COMP_TYPE="$COMP_TYPE" \
                     _ARGCOMPLETE_COMP_WORDBREAKS="$COMP_WORDBREAKS" \
                     _ARGCOMPLETE=1 \
                     _ARGCOMPLETE_SUPPRESS_SPACE=$SUPPRESS_SPACE \
                     "$1" 8>&1 9>&2 1>/dev/null 2>/dev/null) )
    if [[ $? != 0 ]]; then
        unset COMPREPLY
    elif [[ $SUPPRESS_SPACE == 1 ]] && [[ "$COMPREPLY" =~ [=/:]$ ]]; then
        compopt -o nospace
    fi
}
complete -o nospace -o default -o bashdefault -F _python_argcomplete "az"
fpath+=${ZDOTDIR:-~}/.zsh_functions

eval "$(direnv hook zsh)"

export REDO_HISTORY_PATH=~/.zsh_history
source "$(redo alias-file)"
source <(konf-go shellwrapper zsh)

bindkey -s '^q' 'redo^M'
# This is for aws cli
export PAGER=

export AWS_VAULT_BACKEND=pass
# bun completions
[ -s "/home/ramz/.local/share/reflex/bun/_bun" ] && source "/home/ramz/.local/share/reflex/bun/_bun"

# bun
export BUN_INSTALL="$HOME/.local/share/reflex/bun"
export PATH="$BUN_INSTALL/bin:$PATH"
