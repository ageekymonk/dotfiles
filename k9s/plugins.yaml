plugins:
  generate-existing-clusterpolicy:
    # Define a mnemonic to invoke the plugin
    shortCut: Shift-E
    confirm: true
    # What will be shown on the K9s menu
    description: generate-existing-kyverno-clusterpolicy
    # Collections of views that support this shortcut. (You can use `all`)
    scopes:
      - clusterpolicies
    # The command to run upon invocation. Can use Krew plugins here too!
    command: kubectl
    # Whether or not to run the command in background mode
    background: false
    # Defines the command arguments
    args:
      - patch
      - $RESOURCE_NAME.$RESOURCE_GROUP
      - $NAME
      - --type
      - merge
      - --patch
      - '{"spec": {"generateExisting": true}}'
      - --context
      - $CONTEXT

  remove_finalizers:
    shortCut: Shift-K
    confirm: true
    dangerous: true
    scopes:
      - all
    description: |
      Removes all finalizers from selected resource. Be careful when using it,
      it may leave dangling resources or delete them
    command: kubectl
    background: true
    args:
      - patch
      - --context
      - $CONTEXT
      - --namespace
      - $NAMESPACE
      - $RESOURCE_NAME.$RESOURCE_GROUP
      - $NAME
      - -p
      - '{"metadata":{"finalizers":null}}'
      - --type
      - merge
  dive:
    shortCut: Shift-V
    confirm: false
    description: "Dive image"
    scopes:
      - containers
    command: dive
    background: false
    args:
      - $COL-IMAGE

  debug:
    shortCut: Shift-D
    description: Add debug container
    dangerous: true
    scopes:
      - containers
    command: bash
    background: false
    confirm: true
    args:
      - -c
      - 'kubectl debug -it --context $CONTEXT -n=$NAMESPACE $POD --target=$NAME --image=nicolaka/netshoot:v0.13 --share-processes --custom=<(echo ''{"securityContext":{"runAsNonRoot":false,"runAsUser":0}}'') -- bash'

  popeye:
    shortCut: Shift-P
    confirm: false
    description: Popeye
    scopes:
      - serviceaccounts
      - pods
      - namespaces
      - contexts
    command: kubectl
    background: false
    args:
      - popeye
      - -o=json

  hubble:
    shortCut: Shift-H
    description: hubble show dropped packets
    scopes:
      - namespaces
      - pods
    command: hubble
    background: false
    confirm: false
    args:
      - observe
      - -n=$NAMESPACE
      - --verdict=DROPPED
      - -f

  ig:
    shortCut: Shift-G
    description: inspector gadget
    scopes:
      - containers
      - pods
      - nodes
    command: bash
    confirm: false
    background: false
    args:
      - -c
      - |
        IG_VERSION=v0.34.0
        IG_IMAGE=ghcr.io/inspektor-gadget/ig:$IG_VERSION
        IG_FIELD=k8s.podName,src,dst,qr,qtype,name,rcode,latency_ns

        GREEN='\033[0;32m'
        RED='\033[0;31m'
        BLUE='\033[0;34m'
        NC='\033[0m' # No Color

        # Ensure kubectl version is 1.30 or later
        KUBECTL_VERSION=$(kubectl version --client | awk '/Client Version:/{print $3}')
        if [[ "$(echo "$KUBECTL_VERSION" | cut -d. -f2)" -lt 30 ]]; then
          echo -e "${RED}kubectl version 1.30 or later is required${NC}"
          sleep 3
          exit
        fi

        clear

        # Handle containers
        if [[ -n "$POD" ]]; then
          echo -e "${GREEN}Tracing DNS requests for container ${BLUE}${NAME}${GREEN} in pod ${BLUE}${POD}${GREEN} in namespace ${BLUE}${NAMESPACE}${NC}"
          IG_NODE=$(kubectl get pod "$POD" -n "$NAMESPACE" -o jsonpath='{.spec.nodeName}')
          kubectl debug --kubeconfig=$KUBECONFIG  --context=$CONTEXT -q \
            --profile=sysadmin "node/$IG_NODE" -it --image="$IG_IMAGE" -- \
            ig run trace_dns:$IG_VERSION -F "k8s.podName==$POD" -F "k8s.containerName=$NAME" \
            --fields "$IG_FIELD"
            exit
        fi

        # Handle pods
        if [[ -n "$NAMESPACE" ]]; then
          echo -e "${GREEN}Tracing DNS requests for pod ${BLUE}${NAME}${GREEN} in namespace ${BLUE}${NAMESPACE}${NC}"
          IG_NODE=$(kubectl get pod "$NAME" -n "$NAMESPACE" -o jsonpath='{.spec.nodeName}')
          kubectl debug --kubeconfig=$KUBECONFIG  --context=$CONTEXT -q \
            --profile=sysadmin  -it --image="$IG_IMAGE" "node/$IG_NODE" -- \
            ig run trace_dns:$IG_VERSION -F "k8s.podName==$NAME" \
            --fields "$IG_FIELD"
            exit
        fi

        # Handle nodes
        echo -e "${GREEN}Tracing DNS requests for node ${BLUE}${NAME}${NC}"
        kubectl debug --kubeconfig=$KUBECONFIG  --context=$CONTEXT -q \
          --profile=sysadmin -it --image="$IG_IMAGE" "node/$NAME" -- \
          ig run trace_dns:$IG_VERSION --fields "$IG_FIELD"
